# JavaScript-笔记本

/*
 参数填写类型说明：
 	* 元素: object
 	* 数组: object
 	* []: number
 	* '': string (''中如果有英文内容而非中文说明，则为固定字符串)
 	* ||: 非必要填写内容
 
 目录：
 	<1>	基础功能
 		>HTML加载完成后执行JS { $(function (){}) }
 		>根据不同选择符获取元素 { $(|父级元素|,'@标签名||#ID名') }
 	<2>	获取元素属性值 { getStyle(元素,'属性名','number||string') }
 	<3> 运动 { doMove(元素,'属性名',[步长],[结束条件],|回调函数|) } (包涵<2>)
 	<4> 抖动 { shake(元素,'属性名',|回调函数|) }
 	<5> 透明度变化 { opacity(元素,[步长0~100],[结束条件0~100],|回调函数|) } (包涵<2>)
 	<6> 数组极值 { extramum(数组,'max||min') }
 	<7> 去重复 { overKill(数组||'字符串') }
 	<8> 随机整数 { random([起始值],[结束值]) }
 	<9> 查找元素(任意子字符串)在数组中的位数 { arrIndexOf(数组,'子字符串',|[起始位置]|) }
 	<10> 查找元素(或任意子字符串)个数 { search(数组||'字符串',[查找对象]||'查找对象') }
 	<11> 非严格模式的类json字符串转换成严格模式的类json字符串 { jsonify('字符串') }
 */              
      
  
//1、 基础功能

function $(){
       if(typeof arguments[0]==='function'){ //html加载完成后执行js
                 window.onload=arguments[0];
        }else if (typeof arguments[0]==='string'){//根据不同选择符获取元素{规则：父级元素，元素名称 如果不填父级元素，视父级为document 
             switch(arguments[0].charAt(0)){
                 case '#':return(argument[1]||document).getElementById(argument[0].replace('#',''));break;
                 //根据元素ID获取
                 case '@':return(argument[1]||document).getElementsByTagName(arguments[0].replace('@',''));break;
                 //根据元素标签名获取
             }
       }
}


//2、获取元素属性值（1、不能获取复合属性 2、不能获取未设置属性 3、不能获取前后含有空格的属性）；
function getStyle(obj,attr,type){
       if(type==='number'){
           return obj.currentStyle ? parseInt(obj.currentStyle[attr]) ： parseInt(getComputedStyle(obj, null)[attr]);
       }else if(type==='string'){
           return obj.currentStyle ? obj.currentStyle[attr] : getComputedStyle(obj, null)[attr];
       }

}



































































































































































































































